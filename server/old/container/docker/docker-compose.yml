name: ${CONTAINER_NAME}
# Restructure proj:
#  - server
#    - cli -> vircadia.world.cli.ts
#    - cli -> cli test suite here? Will also check health test of containers for those specific test states.
#    - service
#      - docker.base.compose.yml
#      - pg
#        - docker.pg.compose.yml
#        - volume
#           - test (specific tests for this container for health check purposes)
#      - pgweb
#        - docker.pgweb.compose.yml
#        - volume
#           - test (specific tests for this container for health check purposes)
#      - tick
#        - docker.tick.compose.yml
#        - volume
#           - world.tick.manager.ts
#           - test (specific tests for this container for health check purposes)
#      - api
#        - docker.api.compose.yml
#        - volume
#           - world.api.manager.ts
#           - test (specific tests for this container for health check purposes)
#      - script_web
#        - docker.script_web.compose.yml
#        - volume
#           - world.script_web.manager.ts
#           - test (specific tests for this container for health check purposes)
services:
  postgres:
    image: postgres:17.3-alpine3.21
    container_name: ${CONTAINER_NAME}_postgres
    user: "70:70"  # Alpine postgres user (UID:GID)
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}  # This user gets superuser privileges by default
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ["postgres", "-c", "wal_level=logical"]
    ports:
      - "${POSTGRES_PORT}:5432"
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql:uid=70,gid=70,exec
    volumes:
      - vircadia_world_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - vircadia_network
    restart: always

  pgweb:
    # Uses Debian Bullseye
    image: sosedoff/pgweb:0.16.2
    container_name: ${CONTAINER_NAME}_pgweb
    user: "1000:1000"  # Run as non-root user (typical first user UID/GID)
    restart: always
    ports:
      - "${PGWEB_PORT}:8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CONTAINER_NAME}_postgres:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8081"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    read_only: true
    # pgweb needs these directories writable for operation
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache
      - /var/log
      - /home/pgweb/.pgweb/bookmarks
      - /home/pgweb/.pgweb/sessions
      - /home/pgweb/.pgweb/queries
    networks:
      - vircadia_network

networks:
  vircadia_network:
    driver: bridge

volumes:
  vircadia_world_postgres_data:
