name: ${VRCA_SERVER_CONTAINER_NAME}

networks:
  vircadia_network:
    driver: bridge

volumes:
  vircadia_world_postgres_data:

services:
  # Postgres service
  postgres:
    image: postgres:17.3-alpine3.21
    container_name: ${VRCA_SERVER_CONTAINER_NAME}_postgres
    user: "70:70"  # Alpine postgres user (UID:GID)
    environment:
      POSTGRES_DB: ${VRCA_SERVER_SERVICE_POSTGRES_DATABASE}
      POSTGRES_USER: ${VRCA_GLOBAL_CONSTS_DB_SUPER_USER}  # This user gets superuser privileges by default
      POSTGRES_PASSWORD: ${VRCA_SERVER_SERVICE_POSTGRES_PASSWORD}
    command: ["postgres", "-c", "wal_level=logical"]
    ports:
      - "${VRCA_SERVER_SERVICE_POSTGRES_HOST_CONTAINER_EXTERNAL}:${VRCA_SERVER_SERVICE_POSTGRES_PORT_CONTAINER_EXTERNAL}:5432"
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql:uid=70,gid=70,exec
    volumes:
      - vircadia_world_postgres_data:/var/lib/postgresql/data
    healthcheck:
    # TODO: need to add a check that determines if the DB has had its first migration and seed or not (should not be considered ready until then)
      test: ["CMD-SHELL", "pg_isready -U ${VRCA_GLOBAL_CONSTS_DB_SUPER_USER} -d ${VRCA_SERVER_SERVICE_POSTGRES_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - vircadia_network
    restart: always

  # PGWEB service
  pgweb:
    image: sosedoff/pgweb:0.16.2
    container_name: ${VRCA_SERVER_CONTAINER_NAME}_pgweb
    user: "1000:1000"  # Run as non-root user (typical first user UID/GID)
    restart: always
    ports:
      - "${VRCA_SERVER_SERVICE_PGWEB_HOST_CONTAINER_EXTERNAL}:${VRCA_SERVER_SERVICE_PGWEB_PORT_CONTAINER_EXTERNAL}:8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://${VRCA_GLOBAL_CONSTS_DB_SUPER_USER}:${VRCA_SERVER_SERVICE_POSTGRES_PASSWORD}@${VRCA_SERVER_SERVICE_POSTGRES_HOST_CLUSTER}:${VRCA_SERVER_SERVICE_POSTGRES_PORT_CLUSTER}/${VRCA_SERVER_SERVICE_POSTGRES_DATABASE}?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8081"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache
      - /var/log
      - /home/pgweb/.pgweb/bookmarks
      - /home/pgweb/.pgweb/sessions
      - /home/pgweb/.pgweb/queries
    volumes:
      - ./pgweb/volume/test:/app/test
    networks:
      - vircadia_network

  # API service
  api:
    image: oven/bun:1.2.4-slim
    container_name: ${VRCA_SERVER_CONTAINER_NAME}_api
    user: "1000:1000"  # Run as non-root user
    restart: always
    ports:
      - "${VRCA_SERVER_SERVICE_API_HOST_CONTAINER_EXTERNAL}:${VRCA_SERVER_SERVICE_API_PORT_CONTAINER_EXTERNAL}:3020"
    volumes:
      - ./api/volume:/app
    working_dir: /app
    command: ["bun", "run", "--watch", "/app/app/world.api.manager.ts"]
    environment:
      VRCA_GLOBAL_CONSTS_DB_SUPER_USER: ${VRCA_GLOBAL_CONSTS_DB_SUPER_USER}
      VRCA_GLOBAL_CONSTS_DB_AGENT_PROXY_USER: ${VRCA_GLOBAL_CONSTS_DB_AGENT_PROXY_USER}
    
      VRCA_SERVER_DEBUG: ${VRCA_SERVER_DEBUG}
      VRCA_SERVER_SUPPRESS: ${VRCA_SERVER_SUPPRESS}

      VRCA_SERVER_SERVICE_POSTGRES_HOST_CLUSTER: ${VRCA_SERVER_SERVICE_POSTGRES_HOST_CLUSTER}
      VRCA_SERVER_SERVICE_POSTGRES_PORT_CLUSTER: ${VRCA_SERVER_SERVICE_POSTGRES_PORT_CLUSTER}
      VRCA_SERVER_SERVICE_POSTGRES_DATABASE: ${VRCA_SERVER_SERVICE_POSTGRES_DATABASE}
      VRCA_SERVER_SERVICE_POSTGRES_PASSWORD: ${VRCA_SERVER_SERVICE_POSTGRES_PASSWORD}
      VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_PASSWORD: ${VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bun", "test", "/app/test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vircadia_network

  # Script Web service
  script_web:
    image: oven/bun:1.2.4-slim
    container_name: ${VRCA_SERVER_CONTAINER_NAME}_script_web
    user: "1000:1000"  # Run as non-root user
    restart: always
    volumes:
      - ./script_web/volume:/app
    working_dir: /app
    command: ["bun", "run", "--watch", "/app/app/world.script.web.manager.ts"]
    environment:
      VRCA_GLOBAL_CONSTS_DB_AGENT_PROXY_USER: ${VRCA_GLOBAL_CONSTS_DB_AGENT_PROXY_USER}
      VRCA_GLOBAL_CONSTS_DB_SUPER_USER: ${VRCA_GLOBAL_CONSTS_DB_SUPER_USER}

      VRCA_SERVER_DEBUG: ${VRCA_SERVER_DEBUG}
      VRCA_SERVER_SUPPRESS: ${VRCA_SERVER_SUPPRESS}

      VRCA_SERVER_SERVICE_POSTGRES_HOST_CLUSTER: ${VRCA_SERVER_SERVICE_POSTGRES_HOST_CLUSTER}
      VRCA_SERVER_SERVICE_POSTGRES_PORT_CLUSTER: ${VRCA_SERVER_SERVICE_POSTGRES_PORT_CLUSTER}
      VRCA_SERVER_SERVICE_POSTGRES_DATABASE: ${VRCA_SERVER_SERVICE_POSTGRES_DATABASE}
      VRCA_SERVER_SERVICE_POSTGRES_PASSWORD: ${VRCA_SERVER_SERVICE_POSTGRES_PASSWORD}
      VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_PASSWORD: ${VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "bun", "test", "/app/test"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s
    networks:
      - vircadia_network

  # Tick service
  tick:
    image: oven/bun:1.2.4-slim
    container_name: ${VRCA_SERVER_CONTAINER_NAME}_tick
    user: "1000:1000"  # Run as non-root user
    volumes:
      - ./tick/volume:/app
    working_dir: /app
    command: ["bun", "run", "--watch", "/app/app/world.tick.manager.ts"]
    environment:
      VRCA_GLOBAL_CONSTS_DB_AGENT_PROXY_USER: ${VRCA_GLOBAL_CONSTS_DB_AGENT_PROXY_USER}
      VRCA_GLOBAL_CONSTS_DB_SUPER_USER: ${VRCA_GLOBAL_CONSTS_DB_SUPER_USER}

      VRCA_SERVER_DEBUG: ${VRCA_SERVER_DEBUG}
      VRCA_SERVER_SUPPRESS: ${VRCA_SERVER_SUPPRESS}

      VRCA_SERVER_SERVICE_POSTGRES_HOST_CLUSTER: ${VRCA_SERVER_SERVICE_POSTGRES_HOST_CLUSTER}
      VRCA_SERVER_SERVICE_POSTGRES_PORT_CLUSTER: ${VRCA_SERVER_SERVICE_POSTGRES_PORT_CLUSTER}
      VRCA_SERVER_SERVICE_POSTGRES_DATABASE: ${VRCA_SERVER_SERVICE_POSTGRES_DATABASE}
      VRCA_SERVER_SERVICE_POSTGRES_PASSWORD: ${VRCA_SERVER_SERVICE_POSTGRES_PASSWORD}
      VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_PASSWORD: ${VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "bun", "test", "/app/test"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s
    networks:
      - vircadia_network
